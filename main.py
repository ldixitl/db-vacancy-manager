import logging
import os
import time

from tqdm import tqdm

from src.db_manager import DBManager
from src.external_api import HeadHunterAPI
from src.utils import parse_employers, parse_vacancies

log_dir = "logs"
os.makedirs(log_dir, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger("main")
logger.setLevel(logging.DEBUG)
file_handler = logging.FileHandler("logs/main.log", mode="w", encoding="UTF-8")
file_formatter = logging.Formatter(
    "%(asctime)s - %(filename)s - %(levelname)s: %(message)s", datefmt="%d-%m-%Y %H:%M:%S"
)
file_handler.setFormatter(file_formatter)
logger.addHandler(file_handler)


def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –≤—Å–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞."""
    db_manager = None
    try:
        logger.info("–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
        print("üîé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π!")
        time.sleep(0.5)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å API
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API HeadHunter")
        print("\nüîÑ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö...")

        api = HeadHunterAPI()
        employers_data = api.get_employers()
        vacancies_data = []
        for employer in tqdm(employers_data, desc="–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö"):
            vacancies_data.extend(api.get_vacancies(int(employer.get("id"))))

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
        employers = parse_employers(employers_data)
        vacancies = parse_vacancies(vacancies_data)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É...")

        db_manager = DBManager()
        db_manager.create_tables()
        db_manager.insert_employers(employers)
        db_manager.insert_vacancies(vacancies)

        print("‚úÖ  –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        time.sleep(0.5)

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        while True:
            print("\n–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏—è–º–∏:")
            print("1 - üè¢ –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π")
            print("2 - üìú –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π")
            print("3 - üí≤ –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º")
            print("4 - ‚¨ÜÔ∏è –í–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π")
            print("5 - üîé –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É")
            print("0 - üö™ –í—ã—Ö–æ–¥")

            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏—è–º–∏.")
            user_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
            time.sleep(0.5)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª: {user_choice}.")

            if user_choice == "1":
                print("\n–ö–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π:")
                for company in db_manager.get_companies_and_vacancies_count():
                    print(f"‚û¢ {company[0]}: {company[1]} –≤–∞–∫–∞–Ω—Å–∏–π.")
            elif user_choice == "2":
                print("\n–°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π:")
                for vacancy in db_manager.get_all_vacancies():
                    if vacancy[2] and vacancy[3]:
                        if vacancy[2] == vacancy[3] and vacancy[2] > 0:
                            salary_text = f"{vacancy[2]} ‚ÇΩ"
                        else:
                            salary_text = f"{vacancy[2]} ‚Äî {vacancy[3]} ‚ÇΩ"
                    elif vacancy[2] and vacancy[2] > 0:
                        salary_text = f"–æ—Ç {vacancy[2]} ‚ÇΩ"
                    elif vacancy[3] and vacancy[3] > 0:
                        salary_text = f"–¥–æ {vacancy[3]} ‚ÇΩ"
                    else:
                        salary_text = "–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                    print(f"‚û¢ {vacancy[1]} | –ö–æ–º–ø–∞–Ω–∏—è: {vacancy[0]} | {salary_text} | {vacancy[4]}")
            elif user_choice == "3":
                avg = db_manager.get_avg_salary()
                print(f"\n‚û¢ –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º: {avg} —Ä—É–±.")
            elif user_choice == "4":
                print("\n–í–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π:")
                for vacancy in db_manager.get_vacancies_with_higher_salary():
                    if vacancy[2] and vacancy[3]:
                        if vacancy[2] == vacancy[3] and vacancy[2] > 0:
                            salary_text = f"{vacancy[2]} ‚ÇΩ"
                        else:
                            salary_text = f"{vacancy[2]} ‚Äî {vacancy[3]} ‚ÇΩ"
                    elif vacancy[2] and vacancy[2] > 0:
                        salary_text = f"–æ—Ç {vacancy[2]} ‚ÇΩ"
                    elif vacancy[3] and vacancy[3] > 0:
                        salary_text = f"–¥–æ {vacancy[3]} ‚ÇΩ"
                    else:
                        salary_text = "–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                    print(f"‚û¢ {vacancy[1]} | –ö–æ–º–ø–∞–Ω–∏—è: {vacancy[0]} | {salary_text} | {vacancy[4]}")
            elif user_choice == "5":
                while True:
                    keywords = input("\n–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ").strip().split()
                    time.sleep(0.5)
                    if keywords:
                        vacancies = db_manager.get_vacancies_with_keyword(keywords)
                        print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '{keywords}':")
                        time.sleep(1)
                        if vacancies:
                            for vacancy in vacancies:
                                if vacancy[2] and vacancy[3]:
                                    if vacancy[2] == vacancy[3] and vacancy[2] > 0:
                                        salary_text = f"{vacancy[2]} ‚ÇΩ"
                                    else:
                                        salary_text = f"{vacancy[2]} ‚Äî {vacancy[3]} ‚ÇΩ"
                                elif vacancy[2] and vacancy[2] > 0:
                                    salary_text = f"–æ—Ç {vacancy[2]} ‚ÇΩ"
                                elif vacancy[3] and vacancy[3] > 0:
                                    salary_text = f"–¥–æ {vacancy[3]} ‚ÇΩ"
                                else:
                                    salary_text = "–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                                print(f"‚û¢ {vacancy[1]} | –ö–æ–º–ø–∞–Ω–∏—è: {vacancy[0]} | {salary_text} | {vacancy[4]}")
                            break
                        else:
                            print("\n‚ö†Ô∏è –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                            time.sleep(0.5)
                            break
                    else:
                        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤—ë–ª —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥.")
                        print("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
                        time.sleep(0.5)

            elif user_choice == "0":
                print("\nüëãüèª –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
                time.sleep(0.5)
                break
            else:
                logger.info(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: {user_choice}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥.")
                print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
                time.sleep(0.5)

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {e}.", exc_info=True)
        print(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
        if db_manager:
            db_manager.close_conn()


if __name__ == "__main__":
    main()
